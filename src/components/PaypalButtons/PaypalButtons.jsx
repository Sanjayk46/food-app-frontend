// import {
//   PayPalButtons,
//   PayPalScriptProvider,
//   usePayPalScriptReducer,
// } from '@paypal/react-paypal-js';
// import React, { useEffect } from 'react';
// import { useLoading } from '../../hooks/useLoading';
// import { pay } from '../../services/orderservice';
// import { useCart } from '../../hooks/useCart';
// import { toast } from 'react-toastify';
// import { useNavigate } from 'react-router-dom';

// export default function PaypalButtons({ order }) {
//   return (
//     <PayPalScriptProvider
//       options={{
//         clientId:
//           'AXKH1Ja7vh1MhJ3KkmMy0GdheifyRlvHgX49YHriuLT17xBaGLFtv8zx3jUP9BlKR8OXhwHGs9viLHDk',
//       }}
//     >
//       <Buttons order={order} />
//     </PayPalScriptProvider>
//   );
// }

// function Buttons({ order }) {
//   const { clearCart } = useCart();
//   const navigate = useNavigate();
//   const [{ isPending }] = usePayPalScriptReducer();
//   const { showLoading, hideLoading } = useLoading();
//   useEffect(() => {
//     isPending ? showLoading() : hideLoading();
//   });

//   const createOrder = (data, actions) => {
//     return actions.order.create({
//       purchase_units: [
//         {
//           amount: {
//             currency_code: 'USD',
//             value: order.totalPrice,
//           },
//         },
//       ],
//     });
//   };

//   const onApprove = async (data, actions) => {
//     try {
//       const payment = await actions.order.capture();
//       const orderId = await pay(payment.id);
//       clearCart();
//       toast.success('Payment Saved Successfully', 'Success');
//       navigate('/track/' + orderId);
//     } catch (error) {
//       toast.error('Payment Save Failed', 'Error');
//     }
//   };

//   const onError = err => {
//     toast.error('Payment Failed', 'Error');
//   };

//   return (
//     <PayPalButtons
//       createOrder={createOrder}
//       onApprove={onApprove}
//       onError={onError}
//     />
//   );
// }

import React, { useEffect } from 'react';
import { useLoading } from '../../hooks/useLoading';
import { pay } from '../../services/orderservice';
import { useCart } from '../../hooks/useCart';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';
//import RazorpayButton from './RazorpayButton';
import Button from '../Button/Button';

export default function RazorpayButtons({ order }) {
  return (
    <div>
      <Buttons order={order} />
    </div>
  );
}

function Buttons({ order }) {
  const { clearCart } = useCart();
  const navigate = useNavigate();
  const { showLoading, hideLoading } = useLoading();

  useEffect(() => {
    // Load Razorpay script asynchronously
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.async = true;
    document.body.appendChild(script);
  }, []);

  const openRazorpayCheckout = async () => {
    const options = {
      key: 'rzp_test_KAwsECdNWYCUFY', // Replace with your Razorpay key
      amount: Math.round(order.totalPrice * 100), // Amount is in currency subunits (e.g., cents for USD)
      currency: 'INR', // Replace with your currency
      name: 'sanjay corp ltd',
      description: 'food items',
      // order_id: '', // Replace with the order ID generated by your server
      prefill: {
        email: 'sanjayks8046@gmail.com',
        contact: '1234567890',
      },
      theme: {
        color: '#528FF0',
      },
      handler: async function (response) {
        try {
          // Handle successful payment
          const orderId = await pay(response.razorpay_payment_id); // Call your service to process the payment
          console.log(orderId);
          clearCart();
          toast.success('Payment Saved Successfully', 'Success');
          navigate('/track/' + orderId);
        } catch (error) {
          toast.error('Payment Save Failed', 'Error');
        }
      },
      modal: {
        ondismiss: function () {
          // Handle modal close
          toast.error('Payment Cancelled', 'Error');
        },
      },
    };

    const razorpay = new window.Razorpay(options);
    razorpay.open();
  };

  return (
    <Button type="submit" text="Pay with Razorpay" onClick={openRazorpayCheckout}></Button>
  );
}
