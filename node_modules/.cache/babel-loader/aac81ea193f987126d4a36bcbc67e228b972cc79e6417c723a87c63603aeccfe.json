{"ast":null,"code":"// // import { toast } from 'react-toastify';\n\n// // import AxiosService from '../axiosConfig';\n\n// // export const uploadImage = async( event) => {\n// //   let toastId = null;\n\n// //   const image = await getImage(event);\n// //   if (!image) return null;\n\n// //   const formData = new FormData();\n// //   formData.append('image', image, image.name);\n// //   const response = await AxiosService.post('api/upload/', formData, {\n// //     onUploadProgress: ({ progress }) => {\n// //       if (toastId) toast.update(toastId, { progress });\n// //       else toastId = toast.success('Uploading...', { progress });\n// //     },\n// //   });\n// //   toast.dismiss(toastId);\n// //   return response.data.imageUrl;\n\n// // };\n\n// // const getImage = async event => {\n// //   const files = event.target.files;\n\n// //   if (!files || files.length <= 0) {\n// //     toast.warning('Upload file is nott selected!', 'File Upload');\n// //     return null;\n// //   }\n\n// //   const file = files[0];\n\n// //   if (file.type !== 'image/jpeg') {\n// //     toast.error('Only JPG type is allowed', 'File Type Error');\n// //     return null;\n// //   }\n\n// //   return file;\n// // };\nimport { toast } from 'react-toastify';\nexport const uploadImage = async event => {\n  let toastId = null;\n  try {\n    const image = await getImage(event);\n    if (!image) return null;\n    const imageData = await getImageData(image);\n    if (!imageData) {\n      console.error('Error uploading image: Failed to read image data.');\n      toast.error('Error uploading image', 'Upload Error');\n      return null;\n    }\n    const response = await fetch('http://localhost:8000/api/upload/', {\n      method: 'POST',\n      body: JSON.stringify({\n        image: imageData\n      }),\n      headers: {\n        'Content-Type': 'multer/image'\n      },\n      onUploadProgress: ({\n        loaded,\n        total\n      }) => {\n        const progress = Math.round(loaded * 100 / total);\n        if (toastId) toast.update(toastId, {\n          progress\n        });else toastId = toast.success('Uploading...', {\n          progress\n        });\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to upload image');\n    }\n    const responseData = await response.json();\n    toast.dismiss(toastId);\n    if (responseData && responseData.imageUrl) {\n      console.log(responseData.imageUrl);\n      return responseData.imageUrl;\n    } else {\n      console.error('Error uploading image: Response data does not contain the imageUrl property.');\n      toast.error('Error uploading image', 'Upload Error');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    toast.dismiss(toastId);\n    toast.error('Error uploading image', 'Upload Error');\n    return null;\n  }\n};\nconst getImage = async event => {\n  const files = event.target.files;\n  if (!files || files.length <= 0) {\n    toast.warning('Upload file is not selected!', 'File Upload');\n    return null;\n  }\n  const file = files[0];\n  if (file.type !== 'image/jpeg') {\n    toast.error('Only JPG type is allowed', 'File Type Error');\n    return null;\n  }\n  return file;\n};\nconst getImageData = async file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n    reader.readAsDataURL(file);\n  });\n};","map":{"version":3,"names":["toast","uploadImage","event","toastId","image","getImage","imageData","getImageData","console","error","response","fetch","method","body","JSON","stringify","headers","onUploadProgress","loaded","total","progress","Math","round","update","success","ok","Error","responseData","json","dismiss","imageUrl","log","files","target","length","warning","file","type","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/services/uploadservice.js"],"sourcesContent":["// // import { toast } from 'react-toastify';\r\n\r\n// // import AxiosService from '../axiosConfig';\r\n\r\n// // export const uploadImage = async( event) => {\r\n// //   let toastId = null;\r\n\r\n// //   const image = await getImage(event);\r\n// //   if (!image) return null;\r\n\r\n// //   const formData = new FormData();\r\n// //   formData.append('image', image, image.name);\r\n// //   const response = await AxiosService.post('api/upload/', formData, {\r\n// //     onUploadProgress: ({ progress }) => {\r\n// //       if (toastId) toast.update(toastId, { progress });\r\n// //       else toastId = toast.success('Uploading...', { progress });\r\n// //     },\r\n// //   });\r\n// //   toast.dismiss(toastId);\r\n// //   return response.data.imageUrl;\r\n  \r\n// // };\r\n\r\n// // const getImage = async event => {\r\n// //   const files = event.target.files;\r\n\r\n// //   if (!files || files.length <= 0) {\r\n// //     toast.warning('Upload file is nott selected!', 'File Upload');\r\n// //     return null;\r\n// //   }\r\n\r\n// //   const file = files[0];\r\n\r\n// //   if (file.type !== 'image/jpeg') {\r\n// //     toast.error('Only JPG type is allowed', 'File Type Error');\r\n// //     return null;\r\n// //   }\r\n\r\n// //   return file;\r\n// // };\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nexport const uploadImage = async event => {\r\n  let toastId = null;\r\n  try {\r\n    const image = await getImage(event);\r\n    if (!image) return null;\r\n\r\n    const imageData = await getImageData(image);\r\n    if (!imageData) {\r\n      console.error('Error uploading image: Failed to read image data.');\r\n      toast.error('Error uploading image', 'Upload Error');\r\n      return null;\r\n    }\r\n\r\n    const response = await fetch('http://localhost:8000/api/upload/', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ image: imageData }),\r\n      headers: {\r\n        'Content-Type': 'multer/image'\r\n      },\r\n      onUploadProgress: ({ loaded, total }) => {\r\n        const progress = Math.round((loaded * 100) / total);\r\n        if (toastId) toast.update(toastId, { progress });\r\n        else toastId = toast.success('Uploading...', { progress });\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to upload image');\r\n    }\r\n\r\n    const responseData = await response.json();\r\n\r\n    toast.dismiss(toastId);\r\n    \r\n    if (responseData && responseData.imageUrl) {\r\n      console.log(responseData.imageUrl);\r\n      return responseData.imageUrl;\r\n    } else {\r\n      console.error('Error uploading image: Response data does not contain the imageUrl property.');\r\n      toast.error('Error uploading image', 'Upload Error');\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error uploading image:', error);\r\n    toast.dismiss(toastId);\r\n    toast.error('Error uploading image', 'Upload Error');\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getImage = async event => {\r\n  const files = event.target.files;\r\n\r\n  if (!files || files.length <= 0) {\r\n    toast.warning('Upload file is not selected!', 'File Upload');\r\n    return null;\r\n  }\r\n\r\n  const file = files[0];\r\n\r\n  if (file.type !== 'image/jpeg') {\r\n    toast.error('Only JPG type is allowed', 'File Type Error');\r\n    return null;\r\n  }\r\n\r\n  return file;\r\n};\r\n\r\nconst getImageData = async file => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAASA,KAAK,QAAQ,gBAAgB;AAGtC,OAAO,MAAMC,WAAW,GAAG,MAAMC,KAAK,IAAI;EACxC,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMC,QAAQ,CAACH,KAAK,CAAC;IACnC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;IAEvB,MAAME,SAAS,GAAG,MAAMC,YAAY,CAACH,KAAK,CAAC;IAC3C,IAAI,CAACE,SAAS,EAAE;MACdE,OAAO,CAACC,KAAK,CAAC,mDAAmD,CAAC;MAClET,KAAK,CAACS,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;MACpD,OAAO,IAAI;IACb;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEX,KAAK,EAAEE;MAAU,CAAC,CAAC;MAC1CU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,gBAAgB,EAAEA,CAAC;QAAEC,MAAM;QAAEC;MAAM,CAAC,KAAK;QACvC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAEJ,MAAM,GAAG,GAAG,GAAIC,KAAK,CAAC;QACnD,IAAIhB,OAAO,EAAEH,KAAK,CAACuB,MAAM,CAACpB,OAAO,EAAE;UAAEiB;QAAS,CAAC,CAAC,CAAC,KAC5CjB,OAAO,GAAGH,KAAK,CAACwB,OAAO,CAAC,cAAc,EAAE;UAAEJ;QAAS,CAAC,CAAC;MAC5D;IACF,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACe,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,YAAY,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;IAE1C5B,KAAK,CAAC6B,OAAO,CAAC1B,OAAO,CAAC;IAEtB,IAAIwB,YAAY,IAAIA,YAAY,CAACG,QAAQ,EAAE;MACzCtB,OAAO,CAACuB,GAAG,CAACJ,YAAY,CAACG,QAAQ,CAAC;MAClC,OAAOH,YAAY,CAACG,QAAQ;IAC9B,CAAC,MAAM;MACLtB,OAAO,CAACC,KAAK,CAAC,8EAA8E,CAAC;MAC7FT,KAAK,CAACS,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;MACpD,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CT,KAAK,CAAC6B,OAAO,CAAC1B,OAAO,CAAC;IACtBH,KAAK,CAACS,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,IAAI;EAC9B,MAAM8B,KAAK,GAAG9B,KAAK,CAAC+B,MAAM,CAACD,KAAK;EAEhC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IAC/BlC,KAAK,CAACmC,OAAO,CAAC,8BAA8B,EAAE,aAAa,CAAC;IAC5D,OAAO,IAAI;EACb;EAEA,MAAMC,IAAI,GAAGJ,KAAK,CAAC,CAAC,CAAC;EAErB,IAAII,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;IAC9BrC,KAAK,CAACS,KAAK,CAAC,0BAA0B,EAAE,iBAAiB,CAAC;IAC1D,OAAO,IAAI;EACb;EAEA,OAAO2B,IAAI;AACb,CAAC;AAED,MAAM7B,YAAY,GAAG,MAAM6B,IAAI,IAAI;EACjC,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;IAC5CH,MAAM,CAACI,OAAO,GAAGpC,KAAK,IAAI+B,MAAM,CAAC/B,KAAK,CAAC;IACvCgC,MAAM,CAACK,aAAa,CAACV,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}