{"ast":null,"code":"import { toast } from 'react-toastify';\nimport AxiosService from '../axiosConfig';\nexport const uploadImage = async event => {\n  let toastId = null;\n  const image = await getImage(event);\n  if (!image) return null;\n  const formData = new FormData();\n  formData.append('image', image, image.name);\n  const response = await AxiosService.post('api/upload/', formData, {\n    onUploadProgress: ({\n      progress\n    }) => {\n      if (toastId) toast.update(toastId, {\n        progress\n      });else toastId = toast.success('Uploading...', {\n        progress\n      });\n    }\n  });\n  toast.dismiss(toastId);\n  return response.data.imageUrl;\n};\nconst getImage = async event => {\n  const files = event.target.files;\n  if (!files || files.length <= 0) {\n    toast.warning('Upload file is nott selected!', 'File Upload');\n    return null;\n  }\n  const file = files[0];\n  if (file.type !== 'image/jpeg') {\n    toast.error('Only JPG type is allowed', 'File Type Error');\n    return null;\n  }\n  return file;\n};\n// import { toast } from 'react-toastify';\n\n// export const uploadImage = async event => {\n//   let toastId = null;\n//   try {\n//     const image = await getImage(event);\n//     if (!image) return null;\n\n//     const imageData = await getImageData(image);\n//     if (!imageData) {\n//       console.error('Error uploading image: Failed to read image data.');\n//       toast.error('Error uploading image', 'Upload Error');\n//       return null;\n//     }\n\n//     const response = await fetch('http://localhost:8000/api/upload/', {\n//       method: 'POST',\n//       body: JSON.stringify({ image: imageData }),\n//       onUploadProgress: ({ loaded, total }) => {\n//         const progress = Math.round((loaded * 100) / total);\n//         if (toastId) toast.update(toastId, { progress });\n//         else toastId = toast.success('Uploading...', { progress });\n//       }\n//     });\n\n//     if (!response.ok) {\n//       throw new Error('Failed to upload image');\n//     }\n\n//     const responseData = await response.json();\n\n//     toast.dismiss(toastId);\n\n//     if (responseData && responseData.imageUrl) {\n//       console.log(responseData.imageUrl);\n//       return responseData.imageUrl;\n//     } else {\n//       console.error('Error uploading image: Response data does not contain the imageUrl property.');\n//       toast.error('Error uploading image', 'Upload Error');\n//       return null;\n//     }\n//   } catch (error) {\n//     console.error('Error uploading image:', error);\n//     toast.dismiss(toastId);\n//     toast.error('Error uploading image', 'Upload Error');\n//     return null;\n//   }\n// };\n\n// const getImage = async event => {\n//   const files = event.target.files;\n\n//   if (!files || files.length <= 0) {\n//     toast.warning('Upload file is not selected!', 'File Upload');\n//     return null;\n//   }\n\n//   const file = files[0];\n\n//   if (file.type !== 'image/jpeg') {\n//     toast.error('Only JPG type is allowed', 'File Type Error');\n//     return null;\n//   }\n\n//   return file;\n// };\n\n// const getImageData = async file => {\n//   return new Promise((resolve, reject) => {\n//     const reader = new FileReader();\n//     reader.onload = () => resolve(reader.result);\n//     reader.onerror = error => reject(error);\n//     reader.readAsDataURL(file);\n//   });\n// };","map":{"version":3,"names":["toast","AxiosService","uploadImage","event","toastId","image","getImage","formData","FormData","append","name","response","post","onUploadProgress","progress","update","success","dismiss","data","imageUrl","files","target","length","warning","file","type","error"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/services/uploadservice.js"],"sourcesContent":["import { toast } from 'react-toastify';\r\n\r\nimport AxiosService from '../axiosConfig';\r\n\r\nexport const uploadImage = async( event) => {\r\n  let toastId = null;\r\n\r\n  const image = await getImage(event);\r\n  if (!image) return null;\r\n\r\n  const formData = new FormData();\r\n  formData.append('image', image, image.name);\r\n  const response = await AxiosService.post('api/upload/', formData, {\r\n    onUploadProgress: ({ progress }) => {\r\n      if (toastId) toast.update(toastId, { progress });\r\n      else toastId = toast.success('Uploading...', { progress });\r\n    },\r\n  });\r\n  toast.dismiss(toastId);\r\n  return response.data.imageUrl;\r\n  \r\n};\r\n\r\nconst getImage = async event => {\r\n  const files = event.target.files;\r\n\r\n  if (!files || files.length <= 0) {\r\n    toast.warning('Upload file is nott selected!', 'File Upload');\r\n    return null;\r\n  }\r\n\r\n  const file = files[0];\r\n\r\n  if (file.type !== 'image/jpeg') {\r\n    toast.error('Only JPG type is allowed', 'File Type Error');\r\n    return null;\r\n  }\r\n\r\n  return file;\r\n};\r\n// import { toast } from 'react-toastify';\r\n\r\n\r\n// export const uploadImage = async event => {\r\n//   let toastId = null;\r\n//   try {\r\n//     const image = await getImage(event);\r\n//     if (!image) return null;\r\n\r\n//     const imageData = await getImageData(image);\r\n//     if (!imageData) {\r\n//       console.error('Error uploading image: Failed to read image data.');\r\n//       toast.error('Error uploading image', 'Upload Error');\r\n//       return null;\r\n//     }\r\n\r\n//     const response = await fetch('http://localhost:8000/api/upload/', {\r\n//       method: 'POST',\r\n//       body: JSON.stringify({ image: imageData }),\r\n//       onUploadProgress: ({ loaded, total }) => {\r\n//         const progress = Math.round((loaded * 100) / total);\r\n//         if (toastId) toast.update(toastId, { progress });\r\n//         else toastId = toast.success('Uploading...', { progress });\r\n//       }\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to upload image');\r\n//     }\r\n\r\n//     const responseData = await response.json();\r\n\r\n//     toast.dismiss(toastId);\r\n    \r\n//     if (responseData && responseData.imageUrl) {\r\n//       console.log(responseData.imageUrl);\r\n//       return responseData.imageUrl;\r\n//     } else {\r\n//       console.error('Error uploading image: Response data does not contain the imageUrl property.');\r\n//       toast.error('Error uploading image', 'Upload Error');\r\n//       return null;\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error uploading image:', error);\r\n//     toast.dismiss(toastId);\r\n//     toast.error('Error uploading image', 'Upload Error');\r\n//     return null;\r\n//   }\r\n// };\r\n\r\n// const getImage = async event => {\r\n//   const files = event.target.files;\r\n\r\n//   if (!files || files.length <= 0) {\r\n//     toast.warning('Upload file is not selected!', 'File Upload');\r\n//     return null;\r\n//   }\r\n\r\n//   const file = files[0];\r\n\r\n//   if (file.type !== 'image/jpeg') {\r\n//     toast.error('Only JPG type is allowed', 'File Type Error');\r\n//     return null;\r\n//   }\r\n\r\n//   return file;\r\n// };\r\n\r\n// const getImageData = async file => {\r\n//   return new Promise((resolve, reject) => {\r\n//     const reader = new FileReader();\r\n//     reader.onload = () => resolve(reader.result);\r\n//     reader.onerror = error => reject(error);\r\n//     reader.readAsDataURL(file);\r\n//   });\r\n// };\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAIC,OAAO,GAAG,IAAI;EAElB,MAAMC,KAAK,GAAG,MAAMC,QAAQ,CAACH,KAAK,CAAC;EACnC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,EAAEA,KAAK,CAACK,IAAI,CAAC;EAC3C,MAAMC,QAAQ,GAAG,MAAMV,YAAY,CAACW,IAAI,CAAC,aAAa,EAAEL,QAAQ,EAAE;IAChEM,gBAAgB,EAAEA,CAAC;MAAEC;IAAS,CAAC,KAAK;MAClC,IAAIV,OAAO,EAAEJ,KAAK,CAACe,MAAM,CAACX,OAAO,EAAE;QAAEU;MAAS,CAAC,CAAC,CAAC,KAC5CV,OAAO,GAAGJ,KAAK,CAACgB,OAAO,CAAC,cAAc,EAAE;QAAEF;MAAS,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC;EACFd,KAAK,CAACiB,OAAO,CAACb,OAAO,CAAC;EACtB,OAAOO,QAAQ,CAACO,IAAI,CAACC,QAAQ;AAE/B,CAAC;AAED,MAAMb,QAAQ,GAAG,MAAMH,KAAK,IAAI;EAC9B,MAAMiB,KAAK,GAAGjB,KAAK,CAACkB,MAAM,CAACD,KAAK;EAEhC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IAC/BtB,KAAK,CAACuB,OAAO,CAAC,+BAA+B,EAAE,aAAa,CAAC;IAC7D,OAAO,IAAI;EACb;EAEA,MAAMC,IAAI,GAAGJ,KAAK,CAAC,CAAC,CAAC;EAErB,IAAII,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;IAC9BzB,KAAK,CAAC0B,KAAK,CAAC,0BAA0B,EAAE,iBAAiB,CAAC;IAC1D,OAAO,IAAI;EACb;EAEA,OAAOF,IAAI;AACb,CAAC;AACD;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}