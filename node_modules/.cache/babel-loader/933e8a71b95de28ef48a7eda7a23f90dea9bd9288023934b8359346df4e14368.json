{"ast":null,"code":"// // import { toast } from 'react-toastify';\n\n// // import AxiosService from '../axiosConfig';\n\n// // export const uploadImage = async( event) => {\n// //   let toastId = null;\n\n// //   const image = await getImage(event);\n// //   if (!image) return null;\n\n// //   const formData = new FormData();\n// //   formData.append('image', image, image.name);\n// //   const response = await AxiosService.post('api/upload/', formData, {\n// //     onUploadProgress: ({ progress }) => {\n// //       if (toastId) toast.update(toastId, { progress });\n// //       else toastId = toast.success('Uploading...', { progress });\n// //     },\n// //   });\n// //   toast.dismiss(toastId);\n// //   return response.data.imageUrl;\n\n// // };\n\n// // const getImage = async event => {\n// //   const files = event.target.files;\n\n// //   if (!files || files.length <= 0) {\n// //     toast.warning('Upload file is nott selected!', 'File Upload');\n// //     return null;\n// //   }\n\n// //   const file = files[0];\n\n// //   if (file.type !== 'image/jpeg') {\n// //     toast.error('Only JPG type is allowed', 'File Type Error');\n// //     return null;\n// //   }\n\n// //   return file;\n// // };\nexport const uploadImage = async event => {\n  let toastId = null;\n  try {\n    const image = await getImage(event);\n    if (!image) return null;\n    const formData = new FormData();\n    formData.append('image', image); // Remove __filename.name\n\n    console.log('formData:', formData); // Log formData to check if it's populated correctly\n\n    const response = await AxiosService.post('api/upload/', formData, {\n      onUploadProgress: ({\n        loaded,\n        total\n      }) => {\n        const progress = Math.round(loaded * 100 / total);\n        if (toastId) toast.update(toastId, {\n          progress\n        });else toastId = toast.success('Uploading...', {\n          progress\n        });\n      }\n    });\n    console.log('response:', response); // Log response to check if it's populated correctly\n\n    toast.dismiss(toastId);\n\n    // Check if response and response.data are defined before accessing imageUrl\n    if (response && response.data && response.data.imageUrl) {\n      return response.data.imageUrl;\n    } else {\n      console.error('Error uploading image: Response or response data is undefined or does not contain the imageUrl property.');\n      toast.error('Error uploading image', 'Upload Error');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    toast.dismiss(toastId);\n    toast.error('Error uploading image', 'Upload Error');\n    return null;\n  }\n};","map":{"version":3,"names":["uploadImage","event","toastId","image","getImage","formData","FormData","append","console","log","response","AxiosService","post","onUploadProgress","loaded","total","progress","Math","round","toast","update","success","dismiss","data","imageUrl","error"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/services/uploadservice.js"],"sourcesContent":["// // import { toast } from 'react-toastify';\r\n\r\n// // import AxiosService from '../axiosConfig';\r\n\r\n// // export const uploadImage = async( event) => {\r\n// //   let toastId = null;\r\n\r\n// //   const image = await getImage(event);\r\n// //   if (!image) return null;\r\n\r\n// //   const formData = new FormData();\r\n// //   formData.append('image', image, image.name);\r\n// //   const response = await AxiosService.post('api/upload/', formData, {\r\n// //     onUploadProgress: ({ progress }) => {\r\n// //       if (toastId) toast.update(toastId, { progress });\r\n// //       else toastId = toast.success('Uploading...', { progress });\r\n// //     },\r\n// //   });\r\n// //   toast.dismiss(toastId);\r\n// //   return response.data.imageUrl;\r\n  \r\n// // };\r\n\r\n// // const getImage = async event => {\r\n// //   const files = event.target.files;\r\n\r\n// //   if (!files || files.length <= 0) {\r\n// //     toast.warning('Upload file is nott selected!', 'File Upload');\r\n// //     return null;\r\n// //   }\r\n\r\n// //   const file = files[0];\r\n\r\n// //   if (file.type !== 'image/jpeg') {\r\n// //     toast.error('Only JPG type is allowed', 'File Type Error');\r\n// //     return null;\r\n// //   }\r\n\r\n// //   return file;\r\n// // };\r\nexport const uploadImage = async event => {\r\n  let toastId = null;\r\n  try {\r\n    const image = await getImage(event);\r\n    if (!image) return null;\r\n\r\n    const formData = new FormData();\r\n    formData.append('image', image); // Remove __filename.name\r\n\r\n    console.log('formData:', formData); // Log formData to check if it's populated correctly\r\n\r\n    const response = await AxiosService.post('api/upload/', formData, {\r\n      onUploadProgress: ({ loaded, total }) => {\r\n        const progress = Math.round((loaded * 100) / total);\r\n        if (toastId) toast.update(toastId, { progress });\r\n        else toastId = toast.success('Uploading...', { progress });\r\n      },\r\n    });\r\n\r\n    console.log('response:', response); // Log response to check if it's populated correctly\r\n\r\n    toast.dismiss(toastId);\r\n    \r\n    // Check if response and response.data are defined before accessing imageUrl\r\n    if (response && response.data && response.data.imageUrl) {\r\n      return response.data.imageUrl;\r\n    } else {\r\n      console.error('Error uploading image: Response or response data is undefined or does not contain the imageUrl property.');\r\n      toast.error('Error uploading image', 'Upload Error');\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error uploading image:', error);\r\n    toast.dismiss(toastId);\r\n    toast.error('Error uploading image', 'Upload Error');\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG,MAAMC,KAAK,IAAI;EACxC,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMC,QAAQ,CAACH,KAAK,CAAC;IACnC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;IAEvB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,CAAC,CAAC,CAAC;;IAEjCK,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC,CAAC,CAAC;;IAEpC,MAAMK,QAAQ,GAAG,MAAMC,YAAY,CAACC,IAAI,CAAC,aAAa,EAAEP,QAAQ,EAAE;MAChEQ,gBAAgB,EAAEA,CAAC;QAAEC,MAAM;QAAEC;MAAM,CAAC,KAAK;QACvC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAEJ,MAAM,GAAG,GAAG,GAAIC,KAAK,CAAC;QACnD,IAAIb,OAAO,EAAEiB,KAAK,CAACC,MAAM,CAAClB,OAAO,EAAE;UAAEc;QAAS,CAAC,CAAC,CAAC,KAC5Cd,OAAO,GAAGiB,KAAK,CAACE,OAAO,CAAC,cAAc,EAAE;UAAEL;QAAS,CAAC,CAAC;MAC5D;IACF,CAAC,CAAC;IAEFR,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,QAAQ,CAAC,CAAC,CAAC;;IAEpCS,KAAK,CAACG,OAAO,CAACpB,OAAO,CAAC;;IAEtB;IACA,IAAIQ,QAAQ,IAAIA,QAAQ,CAACa,IAAI,IAAIb,QAAQ,CAACa,IAAI,CAACC,QAAQ,EAAE;MACvD,OAAOd,QAAQ,CAACa,IAAI,CAACC,QAAQ;IAC/B,CAAC,MAAM;MACLhB,OAAO,CAACiB,KAAK,CAAC,0GAA0G,CAAC;MACzHN,KAAK,CAACM,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;MACpD,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9CN,KAAK,CAACG,OAAO,CAACpB,OAAO,CAAC;IACtBiB,KAAK,CAACM,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}