{"ast":null,"code":"// import { toast } from 'react-toastify';\n// import AxiosService from '../axiosConfig';\n\n// export const uploadImage = async( event) => {\n//   let toastId = null;\n\n//   const image = await getImage(event);\n//   if (!image) return null;\n\n//   const formData = new FormData();\n//   formData.append('image', image, image.name);\n//   const response = await AxiosService.post('api/upload/', formData,{\n//     headers:{\n//       'Content-Type': 'multipart/form-data'\n//     }\n//   }, \n//   {\n//     onUploadProgress: ({ progress }) => {\n//       if (toastId) toast.update(toastId, { progress });\n//       else toastId = toast.success('Uploading...', { progress });\n//     },\n//   });\n//   toast.dismiss(toastId);\n//   return response.data.imageUrl;\n\n// };\n\n// const getImage = async event => {\n//   const files = event.target.files;\n\n//   if (!files || files.length <= 0) {\n//     toast.warning('Upload file is nott selected!', 'File Upload');\n//     return null;\n//   }\n\n//   const file = files[0];\n\n//   if (file.type !== 'image/jpeg') {\n//     toast.error('Only JPG type is allowed', 'File Type Error');\n//     return null;\n//   }\n\n//   return file;\n// };\nimport { toast } from 'react-toastify';\nimport AxiosService from '../axiosConfig';\nexport const uploadImage = async event => {\n  let toastId = null;\n  const image = await getImage(event);\n  if (!image) return null;\n  const formData = new FormData();\n  formData.append('image', image, image.name);\n  try {\n    const response = await AxiosService.post('api/upload/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        const progress = Math.round(progressEvent.loaded / progressEvent.total * 100);\n        if (toastId) {\n          toast.update(toastId, {\n            progress\n          });\n        } else {\n          toastId = toast.success('Uploading...', {\n            progress\n          });\n        }\n      }\n    });\n    toast.dismiss(toastId);\n    return response.data.data.imageUrl; // Modified to return only the imageUrl\n  } catch (error) {\n    toast.error('Error uploading image', 'Upload Error');\n    return null;\n  }\n};\nconst getImage = async event => {\n  const files = event.target.files;\n  if (!files || files.length <= 0) {\n    toast.warning('Upload file is not selected!', 'File Upload');\n    return null;\n  }\n  const file = files[0];\n  if (file.type !== 'image/jpeg') {\n    toast.error('Only JPG type is allowed', 'File Type Error');\n    return null;\n  }\n  return file;\n};","map":{"version":3,"names":["toast","AxiosService","uploadImage","event","toastId","image","getImage","formData","FormData","append","name","response","post","headers","onUploadProgress","progressEvent","progress","Math","round","loaded","total","update","success","dismiss","data","imageUrl","error","files","target","length","warning","file","type"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/services/uploadservice.js"],"sourcesContent":["// import { toast } from 'react-toastify';\r\n// import AxiosService from '../axiosConfig';\r\n\r\n// export const uploadImage = async( event) => {\r\n//   let toastId = null;\r\n\r\n//   const image = await getImage(event);\r\n//   if (!image) return null;\r\n\r\n//   const formData = new FormData();\r\n//   formData.append('image', image, image.name);\r\n//   const response = await AxiosService.post('api/upload/', formData,{\r\n//     headers:{\r\n//       'Content-Type': 'multipart/form-data'\r\n//     }\r\n//   }, \r\n//   {\r\n//     onUploadProgress: ({ progress }) => {\r\n//       if (toastId) toast.update(toastId, { progress });\r\n//       else toastId = toast.success('Uploading...', { progress });\r\n//     },\r\n//   });\r\n//   toast.dismiss(toastId);\r\n//   return response.data.imageUrl;\r\n  \r\n// };\r\n\r\n// const getImage = async event => {\r\n//   const files = event.target.files;\r\n\r\n//   if (!files || files.length <= 0) {\r\n//     toast.warning('Upload file is nott selected!', 'File Upload');\r\n//     return null;\r\n//   }\r\n\r\n//   const file = files[0];\r\n\r\n//   if (file.type !== 'image/jpeg') {\r\n//     toast.error('Only JPG type is allowed', 'File Type Error');\r\n//     return null;\r\n//   }\r\n\r\n//   return file;\r\n// };\r\nimport { toast } from 'react-toastify';\r\nimport AxiosService from '../axiosConfig';\r\n\r\nexport const uploadImage = async (event) => {\r\n  let toastId = null;\r\n\r\n  const image = await getImage(event);\r\n  if (!image) return null;\r\n\r\n  const formData = new FormData();\r\n  formData.append('image', image, image.name);\r\n\r\n  try {\r\n    const response = await AxiosService.post('api/upload/', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      onUploadProgress: (progressEvent) => {\r\n        const progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);\r\n        if (toastId) {\r\n          toast.update(toastId, { progress });\r\n        } else {\r\n          toastId = toast.success('Uploading...', { progress });\r\n        }\r\n      },\r\n    });\r\n\r\n    toast.dismiss(toastId);\r\n    return response.data.data.imageUrl; // Modified to return only the imageUrl\r\n  } catch (error) {\r\n    toast.error('Error uploading image', 'Upload Error');\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getImage = async (event) => {\r\n  const files = event.target.files;\r\n\r\n  if (!files || files.length <= 0) {\r\n    toast.warning('Upload file is not selected!', 'File Upload');\r\n    return null;\r\n  }\r\n\r\n  const file = files[0];\r\n\r\n  if (file.type !== 'image/jpeg') {\r\n    toast.error('Only JPG type is allowed', 'File Type Error');\r\n    return null;\r\n  }\r\n\r\n  return file;\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAIC,OAAO,GAAG,IAAI;EAElB,MAAMC,KAAK,GAAG,MAAMC,QAAQ,CAACH,KAAK,CAAC;EACnC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,EAAEA,KAAK,CAACK,IAAI,CAAC;EAE3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,YAAY,CAACW,IAAI,CAAC,aAAa,EAAEL,QAAQ,EAAE;MAChEM,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,gBAAgB,EAAGC,aAAa,IAAK;QACnC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAGJ,aAAa,CAACK,KAAK,GAAI,GAAG,CAAC;QAC/E,IAAIhB,OAAO,EAAE;UACXJ,KAAK,CAACqB,MAAM,CAACjB,OAAO,EAAE;YAAEY;UAAS,CAAC,CAAC;QACrC,CAAC,MAAM;UACLZ,OAAO,GAAGJ,KAAK,CAACsB,OAAO,CAAC,cAAc,EAAE;YAAEN;UAAS,CAAC,CAAC;QACvD;MACF;IACF,CAAC,CAAC;IAEFhB,KAAK,CAACuB,OAAO,CAACnB,OAAO,CAAC;IACtB,OAAOO,QAAQ,CAACa,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd1B,KAAK,CAAC0B,KAAK,CAAC,uBAAuB,EAAE,cAAc,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMpB,QAAQ,GAAG,MAAOH,KAAK,IAAK;EAChC,MAAMwB,KAAK,GAAGxB,KAAK,CAACyB,MAAM,CAACD,KAAK;EAEhC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IAC/B7B,KAAK,CAAC8B,OAAO,CAAC,8BAA8B,EAAE,aAAa,CAAC;IAC5D,OAAO,IAAI;EACb;EAEA,MAAMC,IAAI,GAAGJ,KAAK,CAAC,CAAC,CAAC;EAErB,IAAII,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;IAC9BhC,KAAK,CAAC0B,KAAK,CAAC,0BAA0B,EAAE,iBAAiB,CAAC;IAC1D,OAAO,IAAI;EACb;EAEA,OAAOK,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}