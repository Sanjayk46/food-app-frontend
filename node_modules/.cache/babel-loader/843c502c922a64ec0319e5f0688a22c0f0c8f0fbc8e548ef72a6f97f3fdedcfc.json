{"ast":null,"code":"import { toast } from 'react-toastify';\nimport AxiosService from '../axiosConfig';\nexport const uploadImage = async event => {\n  let toastId = null;\n  const image = await getImage(event);\n  if (!image) return null;\n  const formData = new FormData();\n  formData.append('image', image, image.name);\n  const response = await AxiosService.post('api/upload/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    onUploadProgress: ({\n      progress\n    }) => {\n      console.log(progress);\n      if (toastId) toast.update(toastId, {\n        progress\n      });else toastId = toast.success('Uploading...', {\n        progress\n      });\n    }\n  });\n  toast.dismiss(toastId);\n  console.log(response.data.data.imageUrl);\n  return response.data.data.imageUrl;\n};\nexport const imageUrl = async () => {\n  const {\n    data\n  } = await AxiosService.get('/api/upload/');\n  return data;\n};\nconst getImage = async event => {\n  const files = event.target.files;\n  if (!files || files.length <= 0) {\n    toast.warning('Upload file is nott selected!', 'File Upload');\n    return null;\n  }\n  const file = files[0];\n  if (file.type !== 'image/jpeg') {\n    toast.error('Only JPG type is allowed', 'File Type Error');\n    return null;\n  }\n  return file;\n};\n// import { toast } from 'react-toastify';\n// import AxiosService from '../axiosConfig';\n\n// export const uploadImage = async (event) => {\n//   let toastId = null;\n\n//   const image = await getImage(event);\n//   if (!image) return null;\n\n//   const formData = new FormData();\n//   formData.append('image', image, image.name);\n\n//   try {\n//     const response = await AxiosService.post('api/upload/', formData, {\n//       headers: {\n//         'Content-Type': 'multipart/form-data'\n//       },\n//       onUploadProgress: ({ progress }) => {\n//         if (toastId) toast.update(toastId, { progress });\n//         else toastId = toast.success('Uploading...', { progress });\n//       },\n//     });\n\n//     toast.dismiss(toastId);\n//     return response.data.imageUrl; // Assuming the response contains the binary image data\n//   } catch (error) {\n//     console.error('Error uploading image:', error);\n//     toast.error('Error uploading image', 'Upload Error');\n//     return null;\n//   }\n// };\n\n// const getImage = async (event) => {\n//   const files = event.target.files;\n\n//   if (!files || files.length <= 0) {\n//     toast.warning('Upload file is not selected!', 'File Upload');\n//     return null;\n//   }\n\n//   const file = files[0];\n\n//   if (file.type !== 'image/jpeg') {\n//     toast.error('Only JPG type is allowed', 'File Type Error');\n//     return null;\n//   }\n\n//   return file;\n// };","map":{"version":3,"names":["toast","AxiosService","uploadImage","event","toastId","image","getImage","formData","FormData","append","name","response","post","headers","onUploadProgress","progress","console","log","update","success","dismiss","data","imageUrl","get","files","target","length","warning","file","type","error"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/services/uploadservice.js"],"sourcesContent":["import { toast } from 'react-toastify';\nimport AxiosService from '../axiosConfig';\n\nexport const uploadImage = async( event) => {\n  let toastId = null;\n\n  const image = await getImage(event);\n  if (!image) return null;\n\n  const formData = new FormData();\n  formData.append('image', image, image.name);\n  const response = await AxiosService.post('api/upload/', formData,{\n    headers:{\n      'Content-Type': 'multipart/form-data'\n    },\n    onUploadProgress: ({ progress }) => {\n      console.log(progress);\n      if (toastId) toast.update(toastId, { progress });\n      else toastId = toast.success('Uploading...', { progress });\n    },\n  }, \n);\n  toast.dismiss(toastId);\n  console.log(response.data.data.imageUrl);\n  return response.data.data.imageUrl;\n  \n};\nexport const imageUrl = async () => {\n  const { data } = await AxiosService.get('/api/upload/');\n  return data;\n};\n\nconst getImage = async event => {\n  const files = event.target.files;\n\n  if (!files || files.length <= 0) {\n    toast.warning('Upload file is nott selected!', 'File Upload');\n    return null;\n  }\n\n  const file = files[0];\n\n  if (file.type !== 'image/jpeg') {\n    toast.error('Only JPG type is allowed', 'File Type Error');\n    return null;\n  }\n\n  return file;\n};\n// import { toast } from 'react-toastify';\n// import AxiosService from '../axiosConfig';\n\n// export const uploadImage = async (event) => {\n//   let toastId = null;\n\n//   const image = await getImage(event);\n//   if (!image) return null;\n\n//   const formData = new FormData();\n//   formData.append('image', image, image.name);\n\n//   try {\n//     const response = await AxiosService.post('api/upload/', formData, {\n//       headers: {\n//         'Content-Type': 'multipart/form-data'\n//       },\n//       onUploadProgress: ({ progress }) => {\n//         if (toastId) toast.update(toastId, { progress });\n//         else toastId = toast.success('Uploading...', { progress });\n//       },\n//     });\n\n//     toast.dismiss(toastId);\n//     return response.data.imageUrl; // Assuming the response contains the binary image data\n//   } catch (error) {\n//     console.error('Error uploading image:', error);\n//     toast.error('Error uploading image', 'Upload Error');\n//     return null;\n//   }\n// };\n\n// const getImage = async (event) => {\n//   const files = event.target.files;\n\n//   if (!files || files.length <= 0) {\n//     toast.warning('Upload file is not selected!', 'File Upload');\n//     return null;\n//   }\n\n//   const file = files[0];\n\n//   if (file.type !== 'image/jpeg') {\n//     toast.error('Only JPG type is allowed', 'File Type Error');\n//     return null;\n//   }\n\n//   return file;\n// };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAIC,OAAO,GAAG,IAAI;EAElB,MAAMC,KAAK,GAAG,MAAMC,QAAQ,CAACH,KAAK,CAAC;EACnC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,KAAK,EAAEA,KAAK,CAACK,IAAI,CAAC;EAC3C,MAAMC,QAAQ,GAAG,MAAMV,YAAY,CAACW,IAAI,CAAC,aAAa,EAAEL,QAAQ,EAAC;IAC/DM,OAAO,EAAC;MACN,cAAc,EAAE;IAClB,CAAC;IACDC,gBAAgB,EAAEA,CAAC;MAAEC;IAAS,CAAC,KAAK;MAClCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAIX,OAAO,EAAEJ,KAAK,CAACkB,MAAM,CAACd,OAAO,EAAE;QAAEW;MAAS,CAAC,CAAC,CAAC,KAC5CX,OAAO,GAAGJ,KAAK,CAACmB,OAAO,CAAC,cAAc,EAAE;QAAEJ;MAAS,CAAC,CAAC;IAC5D;EACF,CACF,CAAC;EACCf,KAAK,CAACoB,OAAO,CAAChB,OAAO,CAAC;EACtBY,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACU,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC;EACxC,OAAOX,QAAQ,CAACU,IAAI,CAACA,IAAI,CAACC,QAAQ;AAEpC,CAAC;AACD,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM;IAAED;EAAK,CAAC,GAAG,MAAMpB,YAAY,CAACsB,GAAG,CAAC,cAAc,CAAC;EACvD,OAAOF,IAAI;AACb,CAAC;AAED,MAAMf,QAAQ,GAAG,MAAMH,KAAK,IAAI;EAC9B,MAAMqB,KAAK,GAAGrB,KAAK,CAACsB,MAAM,CAACD,KAAK;EAEhC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;IAC/B1B,KAAK,CAAC2B,OAAO,CAAC,+BAA+B,EAAE,aAAa,CAAC;IAC7D,OAAO,IAAI;EACb;EAEA,MAAMC,IAAI,GAAGJ,KAAK,CAAC,CAAC,CAAC;EAErB,IAAII,IAAI,CAACC,IAAI,KAAK,YAAY,EAAE;IAC9B7B,KAAK,CAAC8B,KAAK,CAAC,0BAA0B,EAAE,iBAAiB,CAAC;IAC1D,OAAO,IAAI;EACb;EAEA,OAAOF,IAAI;AACb,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}