{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanjay\\\\Desktop\\\\B50WETamil\\\\food-app frontend\\\\src\\\\components\\\\PaypalButtons\\\\PaypalButtons.jsx\",\n  _s = $RefreshSig$();\n// import {\n//   PayPalButtons,\n//   PayPalScriptProvider,\n//   usePayPalScriptReducer,\n// } from '@paypal/react-paypal-js';\n// import React, { useEffect } from 'react';\n// import { useLoading } from '../../hooks/useLoading';\n// import { pay } from '../../services/orderservice';\n// import { useCart } from '../../hooks/useCart';\n// import { toast } from 'react-toastify';\n// import { useNavigate } from 'react-router-dom';\n\n// export default function PaypalButtons({ order }) {\n//   return (\n//     <PayPalScriptProvider\n//       options={{\n//         clientId:\n//           'AXKH1Ja7vh1MhJ3KkmMy0GdheifyRlvHgX49YHriuLT17xBaGLFtv8zx3jUP9BlKR8OXhwHGs9viLHDk',\n//       }}\n//     >\n//       <Buttons order={order} />\n//     </PayPalScriptProvider>\n//   );\n// }\n\n// function Buttons({ order }) {\n//   const { clearCart } = useCart();\n//   const navigate = useNavigate();\n//   const [{ isPending }] = usePayPalScriptReducer();\n//   const { showLoading, hideLoading } = useLoading();\n//   useEffect(() => {\n//     isPending ? showLoading() : hideLoading();\n//   });\n\n//   const createOrder = (data, actions) => {\n//     return actions.order.create({\n//       purchase_units: [\n//         {\n//           amount: {\n//             currency_code: 'USD',\n//             value: order.totalPrice,\n//           },\n//         },\n//       ],\n//     });\n//   };\n\n//   const onApprove = async (data, actions) => {\n//     try {\n//       const payment = await actions.order.capture();\n//       const orderId = await pay(payment.id);\n//       clearCart();\n//       toast.success('Payment Saved Successfully', 'Success');\n//       navigate('/track/' + orderId);\n//     } catch (error) {\n//       toast.error('Payment Save Failed', 'Error');\n//     }\n//   };\n\n//   const onError = err => {\n//     toast.error('Payment Failed', 'Error');\n//   };\n\n//   return (\n//     <PayPalButtons\n//       createOrder={createOrder}\n//       onApprove={onApprove}\n//       onError={onError}\n//     />\n//   );\n// }\n\nimport React, { useEffect } from 'react';\nimport { useLoading } from '../../hooks/useLoading';\nimport { pay } from '../../services/orderservice';\nimport { useCart } from '../../hooks/useCart';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n//import RazorpayButton from './RazorpayButton';\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RazorpayButtons({\n  order\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Buttons, {\n      order: order\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_c = RazorpayButtons;\nfunction Buttons({\n  order\n}) {\n  _s();\n  const {\n    clearCart\n  } = useCart();\n  const navigate = useNavigate();\n  const {\n    showLoading,\n    hideLoading\n  } = useLoading();\n  useEffect(() => {\n    // Load Razorpay script asynchronously\n    const script = document.createElement('script');\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n    script.async = true;\n    document.body.appendChild(script);\n  }, []);\n  const openRazorpayCheckout = async () => {\n    const options = {\n      key: 'rzp_test_KAwsECdNWYCUFY',\n      // Replace with your Razorpay key\n      amount: Math.round(order.totalPrice * 100),\n      // Amount is in currency subunits (e.g., cents for USD)\n      currency: 'INR',\n      // Replace with your currency\n      name: 'sanjay corp ltd',\n      description: 'food items',\n      order_id: '',\n      // Replace with the order ID generated by your server\n      prefill: {\n        email: 'sanjayks8046@gmail.com',\n        contact: '1234567890'\n      },\n      theme: {\n        color: '#528FF0'\n      },\n      handler: function (response) {\n        try {\n          // Handle successful payment\n          const orderId = pay(response.razorpay_payment_id); // Call your service to process the payment\n          clearCart();\n          toast.success('Payment Saved Successfully', 'Success');\n          navigate('/track/' + orderId);\n        } catch (error) {\n          toast.error('Payment Save Failed', 'Error');\n        }\n      },\n      modal: {\n        ondismiss: function () {\n          // Handle modal close\n          toast.error('Payment Cancelled', 'Error');\n        }\n      }\n    };\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    text: \"Pay with Razorpay\",\n    onClick: openRazorpayCheckout\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Buttons, \"PZd3nOg9JqifEtrZr5YHh14/8qM=\", false, function () {\n  return [useCart, useNavigate, useLoading];\n});\n_c2 = Buttons;\nvar _c, _c2;\n$RefreshReg$(_c, \"RazorpayButtons\");\n$RefreshReg$(_c2, \"Buttons\");","map":{"version":3,"names":["React","useEffect","useLoading","pay","useCart","toast","useNavigate","Button","jsxDEV","_jsxDEV","RazorpayButtons","order","children","Buttons","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","clearCart","navigate","showLoading","hideLoading","script","document","createElement","src","async","body","appendChild","openRazorpayCheckout","options","key","amount","Math","round","totalPrice","currency","name","description","order_id","prefill","email","contact","theme","color","handler","response","orderId","razorpay_payment_id","success","error","modal","ondismiss","razorpay","window","Razorpay","open","type","text","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/sanjay/Desktop/B50WETamil/food-app frontend/src/components/PaypalButtons/PaypalButtons.jsx"],"sourcesContent":["// import {\n//   PayPalButtons,\n//   PayPalScriptProvider,\n//   usePayPalScriptReducer,\n// } from '@paypal/react-paypal-js';\n// import React, { useEffect } from 'react';\n// import { useLoading } from '../../hooks/useLoading';\n// import { pay } from '../../services/orderservice';\n// import { useCart } from '../../hooks/useCart';\n// import { toast } from 'react-toastify';\n// import { useNavigate } from 'react-router-dom';\n\n// export default function PaypalButtons({ order }) {\n//   return (\n//     <PayPalScriptProvider\n//       options={{\n//         clientId:\n//           'AXKH1Ja7vh1MhJ3KkmMy0GdheifyRlvHgX49YHriuLT17xBaGLFtv8zx3jUP9BlKR8OXhwHGs9viLHDk',\n//       }}\n//     >\n//       <Buttons order={order} />\n//     </PayPalScriptProvider>\n//   );\n// }\n\n// function Buttons({ order }) {\n//   const { clearCart } = useCart();\n//   const navigate = useNavigate();\n//   const [{ isPending }] = usePayPalScriptReducer();\n//   const { showLoading, hideLoading } = useLoading();\n//   useEffect(() => {\n//     isPending ? showLoading() : hideLoading();\n//   });\n\n//   const createOrder = (data, actions) => {\n//     return actions.order.create({\n//       purchase_units: [\n//         {\n//           amount: {\n//             currency_code: 'USD',\n//             value: order.totalPrice,\n//           },\n//         },\n//       ],\n//     });\n//   };\n\n//   const onApprove = async (data, actions) => {\n//     try {\n//       const payment = await actions.order.capture();\n//       const orderId = await pay(payment.id);\n//       clearCart();\n//       toast.success('Payment Saved Successfully', 'Success');\n//       navigate('/track/' + orderId);\n//     } catch (error) {\n//       toast.error('Payment Save Failed', 'Error');\n//     }\n//   };\n\n//   const onError = err => {\n//     toast.error('Payment Failed', 'Error');\n//   };\n\n//   return (\n//     <PayPalButtons\n//       createOrder={createOrder}\n//       onApprove={onApprove}\n//       onError={onError}\n//     />\n//   );\n// }\n\nimport React, { useEffect } from 'react';\nimport { useLoading } from '../../hooks/useLoading';\nimport { pay } from '../../services/orderservice';\nimport { useCart } from '../../hooks/useCart';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n//import RazorpayButton from './RazorpayButton';\nimport Button from '../Button/Button';\nexport default function RazorpayButtons({ order }) {\n  return (\n    <div>\n      <Buttons order={order} />\n    </div>\n  );\n}\n\nfunction Buttons({ order }) {\n  const { clearCart } = useCart();\n  const navigate = useNavigate();\n  const { showLoading, hideLoading } = useLoading();\n\n  useEffect(() => {\n    // Load Razorpay script asynchronously\n    const script = document.createElement('script');\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n    script.async = true;\n    document.body.appendChild(script);\n  }, []);\n\n  const openRazorpayCheckout = async () => {\n    const options = {\n      key: 'rzp_test_KAwsECdNWYCUFY', // Replace with your Razorpay key\n      amount: Math.round(order.totalPrice * 100), // Amount is in currency subunits (e.g., cents for USD)\n      currency: 'INR', // Replace with your currency\n      name: 'sanjay corp ltd',\n      description: 'food items',\n      order_id: '', // Replace with the order ID generated by your server\n      prefill: {\n        email: 'sanjayks8046@gmail.com',\n        contact: '1234567890',\n      },\n      theme: {\n        color: '#528FF0',\n      },\n      handler: function (response) {\n        try {\n          // Handle successful payment\n          const orderId = pay(response.razorpay_payment_id); // Call your service to process the payment\n          clearCart();\n          toast.success('Payment Saved Successfully', 'Success');\n          navigate('/track/' + orderId);\n        } catch (error) {\n          toast.error('Payment Save Failed', 'Error');\n        }\n      },\n      modal: {\n        ondismiss: function () {\n          // Handle modal close\n          toast.error('Payment Cancelled', 'Error');\n        }\n      }\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <Button type =\"submit\" text=\"Pay with Razorpay\"onClick={openRazorpayCheckout}></Button>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}